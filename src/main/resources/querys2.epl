//Expression for computing the distance between 2 points on the pitch
create expression distance alias for { (p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y)};


//Dividing the input event into 2 streams, one for the player foots and other for the ball
insert into BallEvents select x , y,z,  avg(a) as a,avg(ax) as ax,avg(ay) as ay,avg(az) as az, avg(v) as v, avg(vx) as vx, avg(vy) as vy, avg(vz) as vz, ts, sensor_id as ball_id from InputEvent((sensor_id=10 or sensor_id=8 or sensor_id=4) and ts>=10753295594424116L)#time(5 milliseconds) group by sensor_id output last every 5 milliseconds ;
insert into PlayerEvents select *, Util.relatedPlayer(sensor_id) as player_id from InputEvent(sensor_id!=4 and sensor_id!=8 and sensor_id!=10 and sensor_id!=105 and sensor_id!=106 and sensor_id!=97 and sensor_id!=98 and sensor_id!=99 and sensor_id!=100);
//x, y,avg(a) as a, avg(v) as v, avg(vx) as vx, avg(vy) as vy, avg(vz) as vz, ts, sensor_id,
//Collecting every player most recent position

//create window EverySensor#unique(sensor_id) as PlayerEvents;

//on PlayerEvents merge into EverySensor insert select *;

//Setting on the triggering just with the ball events
create variable boolean ball=false;
on BallEvents set ball = true;
on PlayerEvents set ball = false;

create variable bool decremented = false;
//create variable int ball_id_var = 4;
//on BallEvents(a<45000000) set decremented = true;

//create variable bool ball_out = false;
//create variable int ball_in=4;



//on BallEvents((x>52470 or x < -50 or y>33965 or y<-33960) and ball_id=ball_in) set ball_out = true;

//Joining The player positions with the most recent ball event
//computing the distance between them, just when the acceleration of the ball is increased

insert into PlayerDistance select current_timestamp, p2.player_id as player_id, p2.sensor_id as sensor_id, p1.ts as ballId, p2.a as sensor_a,  p2.ts as playerId, distance as distance_p, p2.x as legx, p2.y as legy, p1.x as x, p1.y as y, p1.ball_id as ball_id from BallEvents#lastevent as p1, PlayerEvents#unique(sensor_id) as p2
where ball and p1.a>55000000 and distance<1000000 and p1.x<52470 and p1.x > -50 and p1.y<33965 and p1.y>-33960;
//on PlayerDistance set ball_out=false;
//on PlayerDistance set ball_in=ball_id;



//Taking just the nearest player to the ball

create variable long act_id=0;
on BallEvents set act_id=ts;

create variable bool interrupted=false;
on GameIntStart set interrupted = true;
on GameIntStop set interrupted = false;

insert into Hit select prev(0, player_id) as player_id, prev(0,distance_p) as distance_p, prev(0,ballId) as ballId, prev(0,playerId) as playerId, current_timestamp as ts, prev(0,legx) as legx, prev(0,legy) as legy , prev(0,x) as x, prev(0,y) as y, prev(0,sensor_id) as sensor_id from PlayerDistance#rank(sensor_id,100, distance_p asc, playerId desc) where ballId=act_id and interrupted=false ; //and ball_out=false; // output last every 500 milliseconds;
//on Hit set decremented = false;

//This creates the event of output for every Hit that is taken
//just when there is a change in possession

create variable string player_in_poss = "prova";

insert into Possession select current_timestamp as ts, h.player_id as player_id, h.distance_p as distance_p, ballId, playerId from Hit as h where h.player_id!=player_in_poss;

insert into Possession select current_timestamp as ts, "referee" as player_id, 0.0f as distance_p, 0L as ballId, 0L as playerId from GameIntStart;



//insert into Hit select current_timestamp as ts, "ballisout" as player_id, 0.0f as distance_p, 0L as ballId, 0L as playerId,0L as legx, 0L as legy , 0L as x, 0L as y, 0 as sensor_id
//from BallEvents((x>52470 or x < -50 or y>33965 or y<-33960) and ball_id=ball_in) as b where ball_out=true;


on Hit(player_id!=player_in_poss) as p set player_in_poss = p.player_id;

//Basically count how many times the player has hit the ball
insert into OutputStream select (prev(1,ts)-10753295)/1000 as ts,prev(1, player_id) as player_id, (p.ts-prev(1,ts))/1000 as time_of_poss from Possession#length(2) as p;

select ts, player_id, count(*), sum(time_of_poss) from OutputStream group by player_id;

//select p.ts as ts,p.player_id as player_id, count(*) as counter, (p.ts-10753295)/1000 as time_of_poss from Possession#length(2) as p group by player_id;


create expression previsionx alias for { x+((v*vx*1.5)/10000000)};
create expression previsiony alias for { y+((v*vy*1.5)/10000000)};
create expression previsionz alias for { 0+((v*vz*1.5)/10000000) - (0.5*9810*1.5*1.5)};


create variable bool out_1 = false;
on Hit set out_1 = false;



insert into PossibleShot select h.player_id as player_id, b.v as v, b.vx as vx, b.vy as vy, b.vz as vz,  b.x as x, b.y as y, b.a as a, b.ax as ax, b.ay as ay, b.az as az, b.ts as ts, b.z as z  from Hit#lastevent as h, BallEvents#lastevent as b
where h.ballId<b.ts and out_1=false and (h.x - b.x)*(h.x - b.x) + (h.y - b.y)*(h.y - b.y)>=10000000;
//on PossibleShot set out_1 = true;




insert into ShotOnGoal select * from PossibleShot
where x+((v*vx*1.5)/10000000)+0.5*((a*ax)/10000000)*1.5*1.5>22578.5 and x+((v*vx*1.5)/10000000)+0.5*((a*ax)/10000000)*1.5*1.5<29898.5
and 0+((v*vz*1.5)/10000000)+0.5*((a*az)/10000000)*1.5*1.5 - (0.5*9810*1.5*1.5)<2440.0
and ((Util.oppositeTeam(sensor_id)=2 and y+((v*vy*1.5)/10000000)+0.5*((a*ay)/10000000)*1.5*1.5<-33968.0)
or (Util.oppositeTeam(sensor_id)=1 and y+((v*vy*1.5)/10000000)+0.5*((a*ay)/10000000)*1.5*1.5>33941.0));


@name('Prova')select * from ShotOnGoal;